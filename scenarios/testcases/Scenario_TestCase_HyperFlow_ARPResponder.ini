[General]
network = scenarios.networks.Scenario_TestCase


output-vector-file = ${resultdir}/${inifile}/${inifile}-${runnumber}.vec
output-scalar-file = ${resultdir}/${inifile}/${inifile}-${runnumber}.sca

sim-time-limit = 1800s
repeat = 1
seed-set = ${repetition}

**.numControllers = 3

**.numClients = 1


**.rtt.result-recording-modes = +vector,-stats
**.queueSize.result-recording-modes = +vector,+stats
**.bufferSize.result-recording-modes = +vector,+stats
**.waitingTime.result-recording-modes = +vector,+stats

**.packets.result-recording-modes = +count
**.packetBytes.result-recording-modes = +sum
**.packets*.scalar-recording = true
**.packetBytes*.scalar-recording = true

**.numPacketIn*.scalar-recording = true

**.bufferSize*.vector-recording = true
**.queueSize*.vector-recording = true
**.waitingTime*.vector-recording = true

**.flowTable**.scalar-recording = true

**.pingApp[*].rtt*.vector-recording = true


**.controllerApps[*].*.scalar-recording = true
**.pingApp[*].numLost*.scalar-recording = true
**.pingApp[*].numOutOfOrderArrivals*.scalar-recording = true

**.vector-recording = false
**.scalar-recording = false


**.spanningTree.startNode = 4
**.highlightActivePorts = true

# random ping application
**.client*[*].numPingApps = 1
**.client*[*].pingApp[*].typename = "PingAppRandom"
**.client*[*].pingApp[*].sendInterval = 2s
**.client*[*].pingApp[*].startTime = uniform(100s,120s)



#openflow params
**.open_flow_switch1.OF_Switch.connectAddress = "open_flow_controller1"
**.open_flow_switch2.OF_Switch.connectAddress = "open_flow_controller1"
**.open_flow_switch3.OF_Switch.connectAddress = "open_flow_controller1"
**.open_flow_switch4.OF_Switch.connectAddress = "open_flow_controller2"
**.open_flow_switch5.OF_Switch.connectAddress = "open_flow_controller2"
**.open_flow_switch6.OF_Switch.connectAddress = "open_flow_controller2"
**.open_flow_switch7.OF_Switch.connectAddress = "open_flow_controller3"
**.open_flow_switch8.OF_Switch.connectAddress = "open_flow_controller3"
**.open_flow_switch9.OF_Switch.connectAddress = "open_flow_controller3"

**.open_flow_switch*.OF_Switch.connectAt = uniform(0s,1s)
**.open_flow_switch*.etherMAC[*].promiscuous = true

# 404bytes see imix and buffer size of 1.5mb see hp switch 1500000/404
**.OF_Switch.bufferCapacity = 3712


**.OF_Switch.serviceTime = 0.000035s * (${switchServiceTimeFactor= 1,130,140,150,152,154,156,158,160,170,180,190,200})


#1800 00 requests per second on 8xcores 8xthreads and 32 switches (hotice2012-final)
**.open_flow_controller*.serviceTime = 0.000005556s *(${controllerServiceTimeFactor= 1,130,140,150,152,154,156,158,160,170,180,190,200 !switchServiceTimeFactor})

#wfs-nsdi09.pdf 400 pps
**.hf_synchronizer*.serviceTime =  0.001013171s*(${synchronizerServiceTimeFactor= 1,130,140,150,152,154,156,158,160,170,180,190,200 !switchServiceTimeFactor})

**.open_flow_controller*.numControllerApps = 3
**.open_flow_controller*.controllerApps[0].typename = "LLDPForwarding"
#refer to beacon leraning switch code
**.open_flow_controller*.controllerApps[0].flowModIdleTimeOut = 5
**.open_flow_controller*.controllerApps[0].ignoreArpRequests = true

**.open_flow_controller*.controllerApps[1].typename = "HF_LLDPAgent"
**.open_flow_controller*.controllerApps[1].flowModIdleTimeOut = 140

**.open_flow_controller*.controllerApps[2].typename = "HF_ARPResponder"


**.open_flow_controller*.numTcpControllerApps = 1
**.open_flow_controller*.tcpControllerApps[0].typename = "HyperFlowAgent"
**.open_flow_controller*.tcpControllerApps[0].connectAddressHyperFlowSynchronizer = "hf_synchronizer"
**.open_flow_controller*.tcpControllerApps[0].checkSyncEvery=250ms

# NIC configuration
**.ppp[*].queue.frameCapacity = 10  # in routers
**.open_flow_switch*.tcp.mss = 800


#linux mint 15 std value
**.arp.cacheTimeout = 60s
 
# configure control and data plane interfaces separately
*.configurator.config = xmldoc("ipv4config.xml")

[General]
network = scenarios.networks.Scenario_DynamicFatTree

output-vector-file = ${resultdir}/${inifile}/${inifile}-${runnumber}.vec
output-scalar-file = ${resultdir}/${inifile}/${inifile}-${runnumber}.sca

sim-time-limit = 1800s
repeat = 1
seed-set = ${repetition}

**.fat_tree.K = 6

**.queueSize.result-recording-modes = +vector,+stats
**.bufferSize.result-recording-modes = +vector,+stats
**.waitingTime.result-recording-modes = +vector,+stats
**.tcpApp[1].connectionStarted.result-recording-modes = +vector,+stats
**.tcpApp[1].connectionEstablished.result-recording-modes = +vector,+stats
**.tcpApp[1].connectionFinished.result-recording-modes = +vector,+stats
**.tcpApp[1].transmittedBytes.result-recording-modes = +vector,+stats


**.packets.result-recording-modes = +count
**.packetBytes.result-recording-modes = +sum
**.packets*.scalar-recording = true
**.packetBytes*.scalar-recording = true

**.numPacketIn*.scalar-recording = true

**.nodeInNumPaths**.scalar-recording = true
**.avgPathLength.scalar-recording = true
**.minPathLength.scalar-recording = true
**.maxPathLength.scalar-recording = true
**.numClients.scalar-recording = true
**.numPaths.scalar-recording = true

**.flowTable**.scalar-recording = true

**.bufferSize*.vector-recording = true
**.queueSize*.vector-recording = true
**.waitingTime*.vector-recording = true


**.tcpApp[1].connectionStarted*.vector-recording = true
**.tcpApp[1].connectionEstablished*.vector-recording = true
**.tcpApp[1].connectionFinished*.vector-recording = true
**.tcpApp[1].transmittedBytes*.vector-recording = true


**.controllerApps[*].*.scalar-recording = true

**.vector-recording = false
**.scalar-recording = false

**.spanningTree.startNode = 4
**.highlightActivePorts = true


#traffic
**.client[*].numTcpApps = 2
**.client[*].tcpApp[0].typename = "TCPTrafficSinkApp"
**.client[*].tcpApp[0].localPort = 1000
**.client[*].tcpApp[1].typename = "TCPTrafficGeneratorApp"
**.client[*].tcpApp[1].startSending = uniform(100s,120s)
**.client[*].tcpApp[1].pathToFlowSizes = "/home/nicholas/omnetpp/samples/openflow/hostApps/randomFlowSizesCleaned1.txt"




# openflow parameters
**.coreLayerSwitches[*].OF_Switch.connectAddress = "open_flow_controller1"
**.coreLayerSwitches[*].OF_Switch.connectAt = uniform(0s,1s)
**.coreLayerSwitches[*].etherMAC[*].promiscuous = true

**.aggLayerSwitches[*].OF_Switch.connectAddress = "open_flow_controller1"
**.aggLayerSwitches[*].OF_Switch.connectAt = uniform(0s,1s)
**.aggLayerSwitches[*].etherMAC[*].promiscuous = true

**.edgeLayerSwitches[*].OF_Switch.connectAddress = "open_flow_controller1"
**.edgeLayerSwitches[*].OF_Switch.connectAt = uniform(0s,1s)
**.edgeLayerSwitches[*].etherMAC[*].promiscuous = true


# 404bytes see imix and buffer size of 1.5mb see hp switch 1500000/404
**.OF_Switch.bufferCapacity = 3712

**.OF_Switch.serviceTime = 0.000035s * (${switchServiceTimeFactor= 25,50,75,100,125,150,175,200,225,250,275,300})


#1800 00 requests per second on 8xcores 8xthreads and 32 switches (hotice2012-final)
**.open_flow_controller*.serviceTime = 0.000005556s *(${controllerServiceTimeFactor= 25,50,75,100,125,150,175,200,225,250,275,300 !switchServiceTimeFactor})


**.open_flow_controller*.numControllerApps = 2
**.open_flow_controller*.controllerApps[0].typename = "LLDPBalancedMinHop"
#refer to beacon leraning switch code
**.open_flow_controller*.controllerApps[0].flowModIdleTimeOut = 5

**.open_flow_controller*.controllerApps[1].typename = "LLDPAgent"
**.open_flow_controller*.controllerApps[1].flowModIdleTimeOut = 140





# NIC configuration
**.ppp[*].queue.frameCapacity = 10  # in routers


#linux mint 15 std value
**.arp.cacheTimeout = 60s

# configure control and data plane interfaces separately
*.configurator.config = xmldoc("ipv4config.xml")

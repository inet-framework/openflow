[General]
network = scenarios.networks.Scenario_DynamicFatTree

output-vector-file = ${resultdir}/${inifile}/${inifile}-${runnumber}.vec
output-scalar-file = ${resultdir}/${inifile}/${inifile}-${runnumber}.sca

sim-time-limit = 1800s
repeat = 4
seed-set = ${repetition}

**.fat_tree.K = 6

**.rtt.result-recording-modes = +vector,-stats
**.queueSize.result-recording-modes = +vector,+stats
**.bufferSize.result-recording-modes = +vector,+stats
**.waitingTime.result-recording-modes = +vector,+stats

**.packets.result-recording-modes = +count
**.packetBytes.result-recording-modes = +sum
**.packets*.scalar-recording = true
**.packetBytes*.scalar-recording = true

**.numPacketIn*.scalar-recording = true

**.nodeInNumPaths**.scalar-recording = true
**.avgPathLength.scalar-recording = true
**.minPathLength.scalar-recording = true
**.maxPathLength.scalar-recording = true
**.numClients.scalar-recording = true
**.numPaths.scalar-recording = true

**.flowTable**.scalar-recording = true

**.bufferSize*.vector-recording = true
**.queueSize*.vector-recording = true
**.waitingTime*.vector-recording = true

**.pingApp[*].rtt*.vector-recording = true

**.controllerApps[*].*.scalar-recording = true
**.pingApp[*].numLost*.scalar-recording = true
**.pingApp[*].numOutOfOrderArrivals*.scalar-recording = true

**.vector-recording = false
**.scalar-recording = false


**.spanningTree.startNode = 4
**.highlightActivePorts = true


# random ping application
**.client[*].numPingApps = 1
**.client[*].pingApp[*].typename = "PingAppRandom"
**.client[*].pingApp[*].sendInterval = 1s
**.client[*].pingApp[*].startTime = uniform(100s,120s)




# openflow parameters
**.coreLayerSwitches[*].OF_Switch.connectAddress = "open_flow_controller1"
**.coreLayerSwitches[*].OF_Switch.connectAt = uniform(0s,1s)
**.coreLayerSwitches[*].etherMAC[*].promiscuous = true

**.aggLayerSwitches[*].OF_Switch.connectAddress = "open_flow_controller1"
**.aggLayerSwitches[*].OF_Switch.connectAt = uniform(0s,1s)
**.aggLayerSwitches[*].etherMAC[*].promiscuous = true

**.edgeLayerSwitches[*].OF_Switch.connectAddress = "open_flow_controller1"
**.edgeLayerSwitches[*].OF_Switch.connectAt = uniform(0s,1s)
**.edgeLayerSwitches[*].etherMAC[*].promiscuous = true


# 404bytes see imix and buffer size of 1.5mb see hp switch 1500000/404
**.OF_Switch.bufferCapacity = 3712

**.OF_Switch.serviceTime = 0.000035s 

#1800 00 requests per second on 8xcores 8xthreads and 32 switches (hotice2012-final)
**.open_flow_controller*.serviceTime = 0.000005556s * (${cstFactor=674.9460043197,899.9280057595,1012.4190064795,1124.9100071994,1237.4010079194,1349.8920086393,1574.8740100792})


**.open_flow_controller*.numControllerApps = 3
**.open_flow_controller*.controllerApps[0].typename = "LLDPBalancedMinHop"
#refer to beacon leraning switch code
**.open_flow_controller*.controllerApps[0].flowModIdleTimeOut = 5
**.open_flow_controller*.controllerApps[0].ignoreArpRequests = true

**.open_flow_controller*.controllerApps[1].typename = "LLDPAgent"
**.open_flow_controller*.controllerApps[1].flowModIdleTimeOut = 140

**.open_flow_controller*.controllerApps[2].typename = "ARPResponder"


# NIC configuration
**.ppp[*].queue.frameCapacity = 10  # in routers


#linux mint 15 std value
**.arp.cacheTimeout = 60s

# configure control and data plane interfaces separately
*.configurator.config = xmldoc("ipv4config.xml")
